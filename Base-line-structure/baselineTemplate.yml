AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template for baseline network resources.

Parameters:
  VPCCIDR:
    Description: VPC CIDR
    Type: String
    Default: 10.0.0.0/16

  Environment:
    Description: Environment type
    Type: String
    Default: Dev
    AllowedValues: [Dev, Prod, Test]

  ProjectName:
    Type: String
  ProjectID:
    Type: String
  ResourceName:
    Type: String

Mappings:
  SubnetConfig:
    SubnetA:
      CIDR: 10.0.1.0/24
      AZ: ap-south-1a
    SubnetB:
      CIDR: 10.0.2.0/24
      AZ: ap-south-1b
    SubnetC:
      CIDR: 10.0.3.0/24
      AZ: ap-south-1c
    
    SubnetPriA:
      CIDR: 10.0.4.0/24
      AZ: ap-south-1a
    SubnetPriB:
      CIDR: 10.0.5.0/24
      AZ: ap-south-1b
    SubnetPriC:
      CIDR: 10.0.6.0/24
      AZ: ap-south-1c

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-VPC"

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicNetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC

  # Use a loop via AWS::CloudFormation::Stack or macros to create subnets in a real-world use case.
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, SubnetA, CIDR]
      AvailabilityZone: !FindInMap [SubnetConfig, SubnetA, AZ]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-SubnetA"

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, SubnetB, CIDR]
      AvailabilityZone: !FindInMap [SubnetConfig, SubnetB, AZ]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-SubnetB"

  SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, SubnetC, CIDR]
      AvailabilityZone: !FindInMap [SubnetConfig, SubnetC, AZ]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-SubnetC"

  SubnetPriA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, SubnetPriA, CIDR]
      AvailabilityZone: !FindInMap [SubnetConfig, SubnetPriA, AZ]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-SubnetPriA"

  SubnetPriB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, SubnetPriB, CIDR]
      AvailabilityZone: !FindInMap [SubnetConfig, SubnetPriB, AZ]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-SubnetPriB"

  SubnetPriC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, SubnetPriC, CIDR]
      AvailabilityZone: !FindInMap [SubnetConfig, SubnetPriC, AZ]
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-SubnetPriC"

  SubnetARouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref PublicRouteTable

  SubnetBRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref PublicRouteTable

  SubnetCRouteAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetC
      RouteTableId: !Ref PublicRouteTable

  SubnetANACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetA
      NetworkAclId: !Ref PublicNetworkACL

  SubnetBNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetB
      NetworkAclId: !Ref PublicNetworkACL

  SubnetCNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetC
      NetworkAclId: !Ref PublicNetworkACL

  InboundHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80

  OutboundHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNetworkACL
      RuleNumber: 200
      Protocol: 6
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
